# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '1ef8afca-79f7-4bee-bb27-df1b3a6f6041'
  imageRepository: 'zachtest'
  containerRegistry: 'senzakstest.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'senzakstest192668d2-auth'

  helmVersion: '3.3.0'
  acrRegistry: 'acrsenzalphausw2.azurecr.io'
  HELM_EXPERIMENTAL_OCI: 1
  

stages:
- stage: Build
  displayName: Build stage
  jobs:  
  - job: Build
    displayName: Build
    pool:
      name: 'Self-Hosted Agents'
      demands:
        - npm
        - jq
    steps:
    - task: PowerShell@2
      displayName: extract git head commit ID to serve to image tag
      inputs:
        targetType: 'inline'
        script: |
          # Write your PowerShell commands here.
          
          $gitCommit=$(git rev-parse --short HEAD)
          echo "git commit: $gitCommit"
          Write-Host "##vso[task.setvariable variable=GIT_COMMIT]$gitCommit"
          Write-Host "##vso[task.setvariable variable=imageTag]$(Build.SourceBranchName)-$(Build.BuildId)-$gitCommit"

    - task: HelmInstaller@1
      displayName: "install helm"
      inputs:
        helmVersionToInstall: $(helmVersion)
    
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          # Write your commands here
          
          echo $(ARM_CLIENT_SECRET) | helm registry login $(acrRegistry) --username $(ARM_CLIENT_ID) --password-stdin
          echo $(imageTag)
          helm version
        failOnStderr: true
    
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          # Write your commands here
          echo $(build.artifactStagingDirectory)
          mkdir $(build.artifactStagingDirectory)
          echo $(jq -n --arg acrRegistry $(acrRegistry) --arg tag $(imageTag) '.tag=$tag | .acrRegistry=$acrRegistry ') > ../a/variables.json
        failOnStderr: true

        